#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

## Make sure we use dpatch
include /usr/share/dpatch/dpatch.make


DEBIAN_ARCH = $(shell dpkg-architecture -qDEB_BUILD_ARCH)


CFLAGS = -Wall -ggdb3 -fPIC -fstack-protector

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
## Optimise the engine a bit, but still remain generic enough to run on anything debian supports
## -fomit-frame-pointer may give us an extra register, which is good on i386
## -ffast-math is fine. we can take some shortcuts with math, we don't need uber acuraccy here
## (an we are mostly integer based anyway)
## -ftree-vectorize try to rearange code to be SIMD friendly. Needs sse or sse2
## -ftree-vectorizer-verbose=5 debugging info for me.

	CFLAGS += -fgcse-after-reload -fomit-frame-pointer -ffast-math -ftree-vectorize -ftree-vectorizer-verbose=5 -Q

#These cflags below break gcc :)
#	CFLAGS += -O2 -fPIC -fweb -ffast-math -funswitch-loops -fgcse-after-reload -fomit-frame-pointer -fgcse-lm -fgcse-sm -fgcse-las -ftree-loop-linear -ftree-loop-im -ftree-loop-ivcanon -fivopts -ftree-vectorize -ftracer -fvariable-expansion-in-unroller
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif


# Now tune the engine based on our arch
# Need to see if it is a win to remove the assembler code.
ifeq "$(DEBIAN_ARCH)" "i386"
	CFLAGS += -march=i486 -mtune=pentium4 -O2
endif


ifneq "$(DEBIAN_ARCH)" "amd64"
# We are not on amd64, so build this package normally

config.status:
	mkdir -p builddir
	dh_testdir
# We need out patches to be slipstreamed into the .pk3s that will be generated, so insert them here
# These are legacy upgrade hooks. Will need to remove them once the snowberry transistion is complete
	cp debian/jdoom-debian.ded plugins/jdoom/defs
	cp debian/jheretic-debian.ded plugins/jheretic/defs
	cp debian/jhexen-debian.ded plugins/jhexen/defs
#
	# Add here commands to configure the package.
	cd builddir &&  export CFLAGS="$(CFLAGS)" && cmake .. -DCMAKE_INSTALL_PREFIX=/usr/games -DBUILDJDOOM=ON -DBUILDJHERETIC=ON -DBUILDJHEXEN=ON -DBUILDWOLFTC=ON -DBUILDDOOM64TC=ON -DBUILDOPENGL=ON -DBUILDOPENAL=ON -DBUILDSDLMIXER=ON -DBUILDFIXEDASM=ON -DBUILDDOX=OFF -Ddatadir=/usr/share/games/deng

build: build-stamp

build-stamp:  patch config.status
	dh_testdir

	# Add here commands to compile the package.
	cd builddir && $(MAKE) VERBOSE=1

	touch build-stamp

clean: unpatch
	dh_testdir
	dh_testroot
	rm -f build-stamp 

	# Add here commands to clean up after the build process.
	# Cmake doesn't support make distclean, it expects you to build
	# out of source, and to delete the build dir if you want
	# to "make distclean"


	dh_clean 

install: build
	dh_testdir
	dh_testroot
	dh_clean -k 
	dh_installdirs
	mkdir -p debian/deng/usr/share/bug/deng
	install -m 644 debian/reportbug.control debian/deng/usr/share/bug/deng/control
	install -m 644 debian/reportbug.presubj debian/deng/usr/share/bug/deng/presubj
	install -m 755 debian/reportbug.script debian/deng/usr/share/bug/deng/script

	uudecode debian/deng.png.uue > debian/deng/usr/share/pixmaps/deng.png


	# Add here commands to install the package into debian/deng.
	cd builddir && $(MAKE) install DESTDIR=$(CURDIR)/debian/deng


# Build architecture-independent files here.
binary-indep: build install

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_buildinfo
	dh_installchangelogs engine/doc/changelog.txt
	dh_installdocs
	dh_installman engine/doc/doomsday.6
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	chmod 644 debian/deng/usr/games/lib/*
	chmod 644 debian/deng/usr/share/games/deng/data/*.pk3
	chmod 644 debian/deng/usr/share/games/deng/data/doom64tc/*.pk3
	chmod 644 debian/deng/usr/share/games/deng/data/jdoom/*.pk3
	chmod 644 debian/deng/usr/share/games/deng/data/jheretic/*.pk3
	chmod 644 debian/deng/usr/share/games/deng/data/jhexen/*.pk3
	chmod 644 debian/deng/usr/share/games/deng/data/wolftc/*.pk3
	dh_installdeb
	dh_shlibdeps debian/deng/usr/games/lib/* debian/deng/usr/games/bin/*
	dh_gencontrol
	dh_md5sums
	dh_builddeb


binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install 
endif

ifeq "$(DEBIAN_ARCH)" "amd64"
# We are on amd64, so do the funky shit :)

build:
	rm -f debian/control
	cp ./debian/control.amd64 ./debian/control
	chmod +x debian/ubuntu-fetch-and-build-amd64
	debian/ubuntu-fetch-and-build-amd64


clean:
	dh_testdir
	dh_testroot
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

# Extract all debs
	for i in `cd ./debian/pkgs ; /bin/ls *.deb` ; do \
	    dpkg-deb -x ./debian/pkgs/$$i ./debian/$${i%%_*}/ ; done


binary-indep:

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installdocs
	dh_installexamples
	dh_installchangelogs
#      dh_link
#      dh_strip
	dh_compress
	dh_fixperms --exclude "*/ld-*"
#      dh_makeshlibs
	dh_installdeb
#      dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
endif
